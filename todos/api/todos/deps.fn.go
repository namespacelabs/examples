// This file was automatically generated by Foundation.
// DO NOT EDIT. To update, re-run `fn generate`.

package todos

import (
	"context"
	"google.golang.org/grpc"
	"namespacelabs.dev/examples/todos/api/trends"
	"namespacelabs.dev/foundation/std/go/core"
	"namespacelabs.dev/foundation/std/go/server"
	fngrpc "namespacelabs.dev/foundation/std/grpc"
	"namespacelabs.dev/foundation/std/grpc/deadlines"
	"namespacelabs.dev/foundation/universe/db/postgres"
	"namespacelabs.dev/foundation/universe/db/postgres/incluster"
)

// Dependencies that are instantiated once for the lifetime of the service.
type ServiceDeps struct {
	Db         *postgres.DB
	Dl         *deadlines.DeadlineRegistration
	Trends     trends.TrendsServiceClient
	TrendsConn *grpc.ClientConn
}

// Verify that WireService is present and has the appropriate type.
type checkWireService func(context.Context, server.Registrar, ServiceDeps)

var _ checkWireService = WireService

var (
	Package__i7grcp = &core.Package{
		PackageName: "namespacelabs.dev/examples/todos/api/todos",
	}

	Provider__i7grcp = core.Provider{
		Package:     Package__i7grcp,
		Instantiate: makeDeps__i7grcp,
	}
)

func makeDeps__i7grcp(ctx context.Context, di core.Dependencies) (_ interface{}, err error) {
	var deps ServiceDeps

	if err := di.Instantiate(ctx, incluster.Provider__udoubi, func(ctx context.Context, v interface{}) (err error) {
		// name: "todos"
		if deps.Db, err = incluster.ProvideDatabase(ctx, core.MustUnwrapProto("CgV0b2Rvcw==", &incluster.Database{}).(*incluster.Database), v.(incluster.ExtensionDeps)); err != nil {
			return err
		}
		return nil
	}); err != nil {
		return nil, err
	}

	if err := di.Instantiate(ctx, deadlines.Provider__vbko45, func(ctx context.Context, v interface{}) (err error) {
		// configuration: {
		//   service_name: "api.todos.TodosService"
		//   method_name: "List"
		//   maximum_deadline: 2
		// }
		// configuration: {
		//   service_name: "api.todos.TodosService"
		//   method_name: "GetRelatedData"
		//   maximum_deadline: 2
		// }
		if deps.Dl, err = deadlines.ProvideDeadlines(ctx, core.MustUnwrapProto("CiMKFmFwaS50b2Rvcy5Ub2Rvc1NlcnZpY2USBExpc3QdAAAAQAotChZhcGkudG9kb3MuVG9kb3NTZXJ2aWNlEg5HZXRSZWxhdGVkRGF0YR0AAABA", &deadlines.Deadline{}).(*deadlines.Deadline), v.(deadlines.ExtensionDeps)); err != nil {
			return err
		}
		return nil
	}); err != nil {
		return nil, err
	}

	// package_name: "namespacelabs.dev/examples/todos/api/trends"
	if deps.TrendsConn, err = fngrpc.ProvideConn(ctx, core.MustUnwrapProto("CituYW1lc3BhY2VsYWJzLmRldi9leGFtcGxlcy90b2Rvcy9hcGkvdHJlbmRz", &fngrpc.Backend{}).(*fngrpc.Backend)); err != nil {
		return nil, err
	}

	deps.Trends = trends.NewTrendsServiceClient(deps.TrendsConn)

	return deps, nil
}
